{"data":{"site":{"siteMetadata":{"title":"Geoff wrote this","subtitle":"Things I wrote, but probably aren't important","copyright":"Â© All rights reserved.","author":{"name":"Geoff Ford","twitter":"geoffford16"},"disqusShortname":"","url":"https://lumen.netlify.com"}},"markdownRemark":{"id":"aee48286-bd9d-5ef0-ac81-9515f0e1dd8e","html":"<p>Meta-programming techniques can help turn some very ugly, repetative code into simple, beautiful code that is considerably easier to use. This article will show the application of some <em>basic</em> python meta-programming techniques and how they were used to put a pythonic interface atop an obviously java based API.</p>\n<p>The final code is <a href=\"https://github.com/alephnullplex/trendy\">avialable on Github</a> and <a href=\"https://pypi.python.org/pypi/trendy/\">PyPi</a></p>\n<h2>In the beginning</h2>\n<p>I have recently needed to interact with the <a href=\"http://www.trendmicro.com.au/au/enterprise/cloud-solutions/deep-security/\">Trend Micro Deep Security</a> SOAP API via python. The initial attempt used <a href=\"https://fedorahosted.org/suds/\">suds</a> in a pretty straight forward manner. This is a representative example that retrieves a list of <code class=\"language-text\">host</code> objects from Trend.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">get_hosts</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> lookup<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> many<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"\n    Get a host, or list of hosts from Trend.\n\n    If `lookup` is a string, find the matching host by name.\n    If `lookp` is a number, find the matching host by id.\n    If not `lookup` and `many` is True, get all hosts from trend.\n    \"\"\"</span>\n\n    trend_connection <span class=\"token operator\">=</span> TrendConnectionFactory<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>uid<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>pwd<span class=\"token punctuation\">)</span>\n    trend_connection<span class=\"token punctuation\">.</span>authenticate<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># this logs in and gets a session id (sid)</span>\n\n    <span class=\"token keyword\">if</span> trend_connection<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># ...log and return</span>\n\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> lookup <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span> <span class=\"token keyword\">and</span> many<span class=\"token punctuation\">:</span>\n            result <span class=\"token operator\">=</span> trend_connection<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span>service<span class=\"token punctuation\">.</span>hostRetrieveAll<span class=\"token punctuation\">(</span>trend_connection<span class=\"token punctuation\">.</span>sid<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>lookup<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>isdigit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                result <span class=\"token operator\">=</span> trend_connection<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span>service<span class=\"token punctuation\">.</span>hostRetrieve<span class=\"token punctuation\">(</span>lookup<span class=\"token punctuation\">,</span> trend_connection<span class=\"token punctuation\">.</span>sid<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                result <span class=\"token operator\">=</span> trend_connection<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span>service<span class=\"token punctuation\">.</span>hostRetrieveByName<span class=\"token punctuation\">(</span>lookup<span class=\"token punctuation\">,</span> trend_connection<span class=\"token punctuation\">.</span>sid<span class=\"token punctuation\">)</span>\n\n        trend_connection<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span>service<span class=\"token punctuation\">.</span>endSession<span class=\"token punctuation\">(</span>trend_connection<span class=\"token punctuation\">.</span>sid<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">except</span> suds<span class=\"token punctuation\">.</span>WebFault <span class=\"token keyword\">as</span> detail<span class=\"token punctuation\">:</span>\n        trend_connection<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span>service<span class=\"token punctuation\">.</span>endSession<span class=\"token punctuation\">(</span>trend_connection<span class=\"token punctuation\">.</span>sid<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># ...log and return</span>\n    <span class=\"token keyword\">except</span> Exception <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span>\n        trend_connection<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span>service<span class=\"token punctuation\">.</span>endSession<span class=\"token punctuation\">(</span>trend_connection<span class=\"token punctuation\">.</span>sid<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># ...log and return</span>\n\n    default <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token comment\"># it was more complicated than this...</span>\n    <span class=\"token keyword\">if</span> result <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> default\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        result</code></pre></div>\n<p>The trend API is surprising consistent. There are a number of resources such as <code class=\"language-text\">Host</code>, <code class=\"language-text\">FirewallRule</code>, <code class=\"language-text\">SecurityProfile</code> etc with the same basic endpoints: <code class=\"language-text\">retrieve</code>, <code class=\"language-text\">retrieveAll</code>, <code class=\"language-text\">retrieveByName</code>, <code class=\"language-text\">save</code> and <code class=\"language-text\">delete</code>. With at least 7 resources with 5 endpoints we ended up copying the above pattern over 35 times.</p>\n<h3>Goals</h3>\n<p>My high level goals were to make it easier to use the API and look more pythonic. There are some initial glaring issues with the first attempt.</p>\n<p>Session management is a very manual process. You have to explicitly log in, pass around the session id to every subsequent call and then explicitly end the session. This ended up being a very important issue as Trend allows admins to configure the number of concurrent sessions an API user can initiate. We hit the default limit pretty quickly jsut with the number of developers running tests trying to connect.</p>\n<p>Another issue is this method is trying to do too much by having <code class=\"language-text\">lookup</code> overloaded and a bit cumbersome by making <code class=\"language-text\">lookup</code> and <code class=\"language-text\">many</code> co-related.</p>\n<p>A less obvious issue is the unpleasant verboseness of using suds. Having <code class=\"language-text\">client.service</code> repeated for no real reason just clogs up the code. Additionally the camel case naming of the SOAP methods causes pylint to throw up some issues.</p>\n<p>Finally the exception handling is biolerplate that adds little value so we will elimate that completely.</p>\n<h2>Adding some context</h2>\n<p>Where some action must be taken before and/or after a block of code is a pattern that python calls context management. Most of the time this pattern is used for resource management - releasing files, database connections, locks etc.</p>\n<p>We will add an <code class=\"language-text\">__enter__</code> and <code class=\"language-text\">__exit__</code> method to our connection class which enable it to be used as a context manager.<sup id=\"fnref-1\"><a href=\"#fn-1\" class=\"footnote-ref\">1</a></sup></p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">TrendConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> url<span class=\"token punctuation\">,</span> uid<span class=\"token punctuation\">,</span> pwd<span class=\"token punctuation\">,</span> environment<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># set up Suds connection</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__enter__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>sid <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span>service<span class=\"token punctuation\">.</span>authenticate<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>uid<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>pwd<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> self\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__exit__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> exc_type<span class=\"token punctuation\">,</span> exc_val<span class=\"token punctuation\">,</span> exc_tb<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>client <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span>service<span class=\"token punctuation\">.</span>endSession<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>sid<span class=\"token punctuation\">)</span></code></pre></div>\n<p>This only slightly improved the pattern by removing the explicit calls to <code class=\"language-text\">authenticate</code> and <code class=\"language-text\">endSession</code>. It had a huge impact on the <strong>reliability</strong> of the code though as we always close the session correctly. There is no longer the risk that any new code would forget to <code class=\"language-text\">endSession</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">get_hosts</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> lookup<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> many<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"\n    Get a host, or list of hosts from Trend.\n\n    If `lookup` is a string, find the matching host by name.\n    If `lookup` is a number, find the matching host by id.\n    If not `lookup` and `many` is True, get all hosts from trend.\n    \"\"\"</span>\n    <span class=\"token keyword\">with</span> TrendConnection<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>uid<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>pwd<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> trend_connection<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> lookup <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span> <span class=\"token keyword\">and</span> many<span class=\"token punctuation\">:</span>\n            result <span class=\"token operator\">=</span> trend_connection<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span>service<span class=\"token punctuation\">.</span>hostRetrieveAll<span class=\"token punctuation\">(</span>trend_connection<span class=\"token punctuation\">.</span>sid<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>lookup<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>isdigit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                result <span class=\"token operator\">=</span> trend_connection<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span>service<span class=\"token punctuation\">.</span>hostRetrieve<span class=\"token punctuation\">(</span>lookup<span class=\"token punctuation\">,</span> trend_connection<span class=\"token punctuation\">.</span>sid<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                result <span class=\"token operator\">=</span> trend_connection<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span>service<span class=\"token punctuation\">.</span>hostRetrieveByName<span class=\"token punctuation\">(</span>lookup<span class=\"token punctuation\">,</span> trend_connection<span class=\"token punctuation\">.</span>sid<span class=\"token punctuation\">)</span>\n\n        default <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> result <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> default\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            result</code></pre></div>\n<h3>Removing explicit session management</h3>\n<p>The next goal was to remove the need to pass the session id around. The consistency of the Trend API was a huge benefit. It always put the session id in the last argument position. Anything that is consistent can be automated.</p>\n<p>The idea is to intercept any calls to the API endpoints and inject the session id in the last position in the arguments list so the developer doesnât have to.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># what we want to do</span>\n<span class=\"token keyword\">with</span> TrendConnection<span class=\"token punctuation\">(</span>wsdl<span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">,</span> <span class=\"token keyword\">pass</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> trend<span class=\"token punctuation\">:</span>\n    host <span class=\"token operator\">=</span> trend<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span>services<span class=\"token punctuation\">.</span>hostRetrieveByName<span class=\"token punctuation\">(</span><span class=\"token string\">'some_host'</span><span class=\"token punctuation\">)</span>\n    host<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"New name\"</span>\n    trend<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span>services<span class=\"token punctuation\">.</span>hostSave<span class=\"token punctuation\">(</span>host<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Here we start to actually use some meta-programming techniques. A lot of Python meta-programming hinges on a pair of functions - <code class=\"language-text\">getattr</code> and <code class=\"language-text\">setattr</code> - and their related double underscore versions. This family of functions allows us to inspect an objects attributes. In a dynamic language we can also use them to create attributes. <sup id=\"fnref-2\"><a href=\"#fn-2\" class=\"footnote-ref\">2</a></sup></p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">TrendConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__getattr__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> attribute_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">def</span> <span class=\"token function\">_wrapped</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            args <span class=\"token operator\">=</span> args <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>sid<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> <span class=\"token builtin\">getattr</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span>service<span class=\"token punctuation\">,</span> attribute_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">return</span> _wrapped</code></pre></div>\n<p>Here we are intercepting unknown attributes<sup id=\"fnref-3\"><a href=\"#fn-3\" class=\"footnote-ref\">3</a></sup> and assume they are a function call to the SOAP endpoints. The session id is added to the list of arguments and then we use <code class=\"language-text\">getattr</code> to actually invoke the function with the new args. This is all wrapped up and passed back to the caller.</p>\n<p>This approach ends up being slightly nicer as it removes the cumbersome <code class=\"language-text\">client.services</code> and the session id so we end up with client code like so.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">with</span> TrendConnection<span class=\"token punctuation\">(</span>wsdl<span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">,</span> <span class=\"token keyword\">pass</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> trend<span class=\"token punctuation\">:</span>\n    host <span class=\"token operator\">=</span> trend<span class=\"token punctuation\">.</span>hostRetrieveByName<span class=\"token punctuation\">(</span><span class=\"token string\">'some_host'</span><span class=\"token punctuation\">)</span>\n    host<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"New name\"</span>\n    trend<span class=\"token punctuation\">.</span>hostSave<span class=\"token punctuation\">(</span>host<span class=\"token punctuation\">)</span></code></pre></div>\n<h2>Many endpoints, same pattern</h2>\n<p>Again, Trends API consistency gives us more opportunites. Each of the resource types have the same set of endpoints avaialable, but the endpoints are decidedly not pythonic. We can fix that.</p>\n<p>Weâll create a simple interface that all services will follow.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ServiceBase</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> trend<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    \tself<span class=\"token punctuation\">.</span>trend <span class=\"token operator\">=</span> trend\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">all</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"\n        Return a collection of all the objects in Trend\n        \"\"\"</span>\n        <span class=\"token keyword\">pass</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">by_id</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token builtin\">id</span><span class=\"token punctuation\">)</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"\n        Get a single object using the Trend ID\n        \"\"\"</span>\n        <span class=\"token keyword\">pass</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">by_ids</span><span class=\"token punctuation\">(</span>slef<span class=\"token punctuation\">,</span> ids<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"\n        Get a collection of objects using ids\n        \"\"\"</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>by_id<span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> <span class=\"token builtin\">id</span> <span class=\"token keyword\">in</span> ids<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">by_name</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"\n        Get a single object using the Trend name\n        \"\"\"</span>\n        <span class=\"token keyword\">pass</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">by_names</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> names<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"\n        Get a collection of objects using names\n        \"\"\"</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>by_name<span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> name <span class=\"token keyword\">in</span> names<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    \t<span class=\"token triple-quoted-string string\">\"\"\"\n    \tCreate or update the item in Trend.\n    \t\"\"\"</span>\n    \t<span class=\"token keyword\">pass</span></code></pre></div>\n<p>This is a pretty basic interface but it looks much better to our snake eyes. Letâs go ahead and implement one.</p>\n<h3>Creating a service</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">HostService</span><span class=\"token punctuation\">(</span>ServiceBase<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">all</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> trend<span class=\"token punctuation\">.</span>hostsRetrieveAll<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">by_id</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token builtin\">id</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> trend<span class=\"token punctuation\">.</span>hostsRetrieveByID<span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">by_name</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> trend<span class=\"token punctuation\">.</span>hostsRetrieveByName<span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> trend<span class=\"token punctuation\">.</span>hostsSave<span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span></code></pre></div>\n<p>So we can copy and paste that and replace all mention of <code class=\"language-text\">host</code> with <code class=\"language-text\">firewallRule</code> or <code class=\"language-text\">securityProfile</code> etc. for the other services. But Iâm not a real fan of copy and paste. I think we can do even better than this.</p>\n<p>Notice that all the endpoints start with a common prefix that represents the resource and all the actions are the same. What is consistent, can be automated.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ServiceBase</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> trend<span class=\"token punctuation\">,</span> prefix<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    \tself<span class=\"token punctuation\">.</span>trend <span class=\"token operator\">=</span> trend\n    \tself<span class=\"token punctuation\">.</span>_prefix <span class=\"token operator\">=</span> prefix\n\n    <span class=\"token comment\"># the other base methods can be implmented in a similar fashion</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">all</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token builtin\">getattr</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>trend<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>_prefix <span class=\"token operator\">+</span> <span class=\"token string\">'RetrieveAll'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">HostService</span><span class=\"token punctuation\">(</span>ServiceBase<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> trend<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>HostService<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span>trend<span class=\"token punctuation\">,</span> <span class=\"token string\">'hosts'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Here we have a default implementation in the base class using a <code class=\"language-text\">prefix</code> to determine which method to call on trend via <code class=\"language-text\">getattr</code>.</p>\n<p>Adding additonal resources is now only three lines of code instead of overriding all the methods.</p>\n<p>Letâs see what this api looks like now.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">with</span> TrendConnection<span class=\"token punctuation\">(</span>wsdl<span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">,</span> <span class=\"token keyword\">pass</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> trend<span class=\"token punctuation\">:</span>\n    host_service <span class=\"token operator\">=</span> HostService<span class=\"token punctuation\">(</span>trend<span class=\"token punctuation\">)</span>\n    host <span class=\"token operator\">=</span> host_service<span class=\"token punctuation\">.</span>by_name<span class=\"token punctuation\">(</span><span class=\"token string\">'some_name'</span><span class=\"token punctuation\">)</span>\n    host<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"New name\"</span>\n    host_service<span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span>host<span class=\"token punctuation\">)</span></code></pre></div>\n<p>This is considerably nicer than where we began. But I think we can still do better.</p>\n<h2>Auto-creating the services</h2>\n<p>Needing to manually instatiate each service is a little bit annoying. Something like this would be even simpler.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">with</span> TrendConnection<span class=\"token punctuation\">(</span>wsdl<span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">,</span> <span class=\"token keyword\">pass</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> trend<span class=\"token punctuation\">:</span>\n    host <span class=\"token operator\">=</span> trend<span class=\"token punctuation\">.</span>hosts<span class=\"token punctuation\">.</span>by_name<span class=\"token punctuation\">(</span><span class=\"token string\">'some_name'</span><span class=\"token punctuation\">)</span>\n    host<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"New name\"</span>\n    trend<span class=\"token punctuation\">.</span>hosts<span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span>host<span class=\"token punctuation\">)</span></code></pre></div>\n<p>This will be a lot simpler particularly when we need to start interacting with multiple resources. To do this we can simply add each service as an attribute to the <code class=\"language-text\">TrendConnection</code> class. But, again, I donât like typing that all in. When I add another <code class=\"language-text\">Service</code> I just want it to automatically be available.</p>\n<p>This is easily acheivable by getting the list of <code class=\"language-text\">Service</code> classes and adding them to the <code class=\"language-text\">Connection</code> object using <code class=\"language-text\">setattr</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">TrendConnection</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># usual setup</span>\n        self<span class=\"token punctuation\">.</span>_add_services<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">_add_services</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        all_services <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>service <span class=\"token keyword\">for</span> service <span class=\"token keyword\">in</span> <span class=\"token builtin\">dir</span><span class=\"token punctuation\">(</span>services<span class=\"token punctuation\">)</span>\n                          <span class=\"token keyword\">if</span> service<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">.</span>endswith<span class=\"token punctuation\">(</span><span class=\"token string\">'Service'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">for</span> service <span class=\"token keyword\">in</span> all_services<span class=\"token punctuation\">:</span>\n            <span class=\"token builtin\">setattr</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> snake_case<span class=\"token punctuation\">(</span>service<span class=\"token punctuation\">.</span>__class__<span class=\"token punctuation\">.</span>__name__<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> service<span class=\"token punctuation\">)</span></code></pre></div>\n<p>You may have noticed that I called the <code class=\"language-text\">ServiceBase</code> a slightly different naming format to the <code class=\"language-text\">HostService</code>. This is so that I can easily identify actual services in the <code class=\"language-text\">services</code> module and then attach them to the connection object.</p>\n<p>The <code class=\"language-text\">snake_case</code> function is a simple one that turns CamelCase into a snake_case so that the attributes pass pylint.</p>\n<h2>Conclusion</h2>\n<p>The final results of the API usage are considerably cleaner and definately more pythonic. Adding new services is now a simple three line affair rather than having to copy and paste a lot of boiler plate.</p>\n<p>All this comes at a small cost of developer understanding. We had to document very well as some of the code was not immediately obvious to less experienced developers.</p>\n<div class=\"footnotes\">\n<hr>\n<ol>\n<li id=\"fn-1\">\n<p>For a more thorough intoduction to context managers see <a href=\"http://preshing.com/20110920/the-python-with-statement-by-example/\">Python with statement by example</a> or <a href=\"https://www.python.org/dev/peps/pep-0343/\">PEP343</a></p>\n<a href=\"#fnref-1\" class=\"footnote-backref\">â©</a>\n</li>\n<li id=\"fn-2\">\n<p>For a more thorough introduction to these functions see <a href=\"http://chase-seibert.github.io/blog/2013/04/12/getattr-setattr.html\">this blog post</a>.</p>\n<a href=\"#fnref-2\" class=\"footnote-backref\">â©</a>\n</li>\n<li id=\"fn-3\">\n<p>In the real code there is a <a href=\"https://github.com/alephnullplex/trendy/blob/master/trendy/connection.py#L69\">list of known method calls</a> to validate against. This avoids some runtime errors trying to invoke a method that does not exist.</p>\n<a href=\"#fnref-3\" class=\"footnote-backref\">â©</a>\n</li>\n</ol>\n</div>","fields":{"tagSlugs":["/tags/apis/","/tags/python/","/tags/metaprogramming/"],"slug":"/posts/python-meta-programming-with-apis/"},"frontmatter":{"title":"Python Meta-Programming with APIs","tags":["apis","python","metaprogramming"],"date":"2015-05-12T08:47:36Z","description":"Meta-programming techniques can help turn some very ugly, repetative code into simple, beautiful code that is considerably easier to use. This article will show the application of some basic python meta-programming techniques and how they were used to put a pythonic interface atop an obviously java based API."}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/python-meta-programming-with-apis/"}}