{"data":{"site":{"siteMetadata":{"title":"I wrote this","author":"Geoff Ford"}},"markdownRemark":{"id":"2ff4046d-a9d1-5368-a98d-8f4616eef291","excerpt":"Serverless development is becoming a pretty common pattern now-a-days.  There are some nice libraries and frameworks popping up and the…","html":"<p>Serverless development is becoming a pretty common pattern now-a-days.  There are some nice libraries and frameworks popping up and the aptlay named\n<a href=\"https://serverless.com\">Serverless</a> seems to be the most popular.<sup id=\"fnref-1\"><a href=\"#fn-1\" class=\"footnote-ref\">1</a></sup></p>\n<p><a href=\"https://serverless.com\">Serverless</a> does support <a href=\"https://serverless.com/framework/docs/providers/aws/examples/hello-world/csharp/\">dotnet core using C#</a> out of the box. They even have a generator.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token operator\">></span> ~   sls create --template aws-csharp --path helloService</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">handleChange</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    value<span class=\"token punctuation\">:</span> newValue<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//Why is my state not updated?</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Why is your state not getting updated?</p>\n<p>Straight out of <a href=\"https://reactjs.org/docs/state-and-lifecycle.html#state-updates-may-be-asynchronous\">React docs</a>, <code class=\"language-text\">setState</code> may be asynchronous. What does that mean?</p>\n<p>Let’s find out.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'bar'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>What is the output?</p>\n<p>First the second <code class=\"language-text\">console.log</code> fires and then the first one inside the <code class=\"language-text\">setTimeout</code> function. This happens because <code class=\"language-text\">setTimeout</code> is asynchronous and is moved to the browser thread. So the code that runs after <code class=\"language-text\">setTimeout</code> gets executed however small the timeout is.</p>\n<p>Same is the case with <code class=\"language-text\">setState</code> Because of it’s asynchronous state, the statement after is being called before the actual <code class=\"language-text\">setState</code> function.</p>\n<hr>\n<h3>How do we fix this?</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">handleChange</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">{</span>\n      value<span class=\"token punctuation\">:</span> newValue<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">setState</code> actually comes with a callback version. All you have to do is provide the function to be run after the <code class=\"language-text\">setState</code> is executed. Here, you can give whatever action you wanted to perform once the setState is done.</p>\n<p>Since you might already have the result you are going to <code class=\"language-text\">setState</code> with, it might be better to utilise that result for regular operations rather than using the callback.</p>\n<p>PS: You could also just use <code class=\"language-text\">console.log(this.state.value)</code> in <code class=\"language-text\">render()</code> function or <code class=\"language-text\">componentDidUpdate()</code> but I’m guessing you already knew that.</p>\n<h3>Why is it asynchronous?</h3>\n<p>Now that you know how to fix it, you can leave.</p>\n<p>Or you can stay and figure out why is it made asynchronous. <em>Doesn’t it make React slower?</em></p>\n<p>From the docs:</p>\n<blockquote>\n<p>React may batch multiple <code class=\"language-text\">setState()</code> calls into a single update for performance.</p>\n</blockquote>\n<blockquote>\n<p>Because <code class=\"language-text\">this.props</code> and <code class=\"language-text\">this.state</code> may be updated asynchronously, you should not rely on their values for calculating the next state.</p>\n</blockquote>\n<p>Yes, that is just it. React it doing this for performance. You might not feel the need for it in a small application. But in a larger application where a lot of state updates may be taking place simultaneously, batching state updates comes as a boon.</p>\n<p>The <code class=\"language-text\">setState</code> comes with several other neat tricks as well, with <code class=\"language-text\">prevState</code> which you should definitely check out if you are new to React or may be just haven’t heard of it.</p>\n<div class=\"footnotes\">\n<hr>\n<ol>\n<li id=\"fn-1\">\n<p>  Tested and measured by the highly rigorous ‘gut-feel’ method</p>\n<a href=\"#fnref-1\" class=\"footnote-backref\">↩</a>\n</li>\n</ol>\n</div>","fields":{"readingTime":{"text":"3 min read"}},"frontmatter":{"title":"dotnet in a Serverless world","date":"March 08, 2019","tags":["dotnet","serverless","aws"]}}},"pageContext":{"slug":"/dotnet-serverless/","previous":null,"next":{"fields":{"slug":"/testing-tags/"},"frontmatter":{"title":"Testing tags"}}}}