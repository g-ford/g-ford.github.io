{"version":3,"sources":["webpack:///./src/components/post.js","webpack:///./src/pages/index.js","webpack:///./src/utils/media.js","webpack:///./src/utils/styled-link.js","webpack:///./src/components/seo.js","webpack:///./src/components/header.js","webpack:///./src/components/layout.js"],"names":["Container","styled","div","withConfig","displayName","componentId","media","phone","_templateObject","Title","h4","Post","_ref","node","react_default","a","createElement","styled_link","to","fields","slug","frontmatter","title","date","readingTime","text","dangerouslySetInnerHTML","__html","excerpt","propTypes","PropTypes","shape","id","string","isRequired","h3","pages_templateObject","BlogIndex","render","posts","this","props","data","allMarkdownRemark","edges","layout","seo","keywords","pages_Title","map","post","key","Component","pageQuery","sizes","desktop","tablet","Object","keys","reduce","acc","label","css","apply","arguments","styled_components__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","gatsby__WEBPACK_IMPORTED_MODULE_1__","StyledLink","Link","SEO","description","lang","meta","react__WEBPACK_IMPORTED_MODULE_1___default","gatsby__WEBPACK_IMPORTED_MODULE_4__","query","detailsQuery","metaDescription","site","siteMetadata","react_helmet__WEBPACK_IMPORTED_MODULE_3___default","htmlAttributes","titleTemplate","name","content","property","author","concat","length","join","_public_static_d_1025518380_json__WEBPACK_IMPORTED_MODULE_0__","defaultProps","array","arrayOf","nav","h1","Header","GlobalStyles","createGlobalStyle","layout_templateObject","Footer","footer","Content","_templateObject2","Layout","children","gatsby_browser_entry","Fragment","header","_1044757290"],"mappings":"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","file":"component---src-pages-index-js-d100ad1fc083bf6c5c7f.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\nimport StyledLink from '../utils/styled-link';\nimport media from '../utils/media';\n\nconst Container = styled.div`\n  padding: 1rem 0;\n  margin: 1rem 0;\n\n  &:first-child {\n    margin-top: 0;\n  }\n\n  ${media.phone`\n    margin: 0.5rem 0;\n    padding: 0.4rem 0;\n  `}\n`;\n\nconst Title = styled.h4`\n  margin-bottom: 0.2rem;\n  font-size: 2.2rem;\n`;\n\nconst Post = ({ node }) => (\n  <StyledLink to={node.fields.slug}>\n    <Container>\n      <Title>{node.frontmatter.title}</Title>\n      <sub>\n        <span>on {node.frontmatter.date}</span>\n        <span>&nbsp; - &nbsp;</span>\n        <span>{node.fields.readingTime.text}</span>\n      </sub>\n      <p dangerouslySetInnerHTML={{ __html: node.excerpt }} />\n    </Container>\n  </StyledLink>\n);\n\nPost.propTypes = {\n  node: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    frontmatter: PropTypes.shape({\n      title: PropTypes.string.isRequired,\n      date: PropTypes.string.isRequired,\n    }),\n    fields: PropTypes.shape({\n      slug: PropTypes.string.isRequired,\n    }),\n    excerpt: PropTypes.string.isRequired,\n  }),\n};\n\nexport default Post;\n","import React, { Component } from 'react';\nimport { graphql } from 'gatsby';\nimport styled from 'styled-components';\n\nimport Layout from '../components/layout';\nimport SEO from '../components/seo';\nimport Post from '../components/post';\nimport media from '../utils/media';\n\nconst Title = styled.h3`\n  font-weight: 800;\n  font-size: 2.6rem;\n  margin: 6rem 0 0;\n\n  ${media.phone`\n    margin: 3rem 0 0;\n  `}\n`;\n\nclass BlogIndex extends Component {\n  render() {\n    const { data } = this.props;\n    const posts = data.allMarkdownRemark.edges;\n    return (\n      <Layout>\n        <SEO title=\"All Posts\" keywords={[`gatsby`, `blog`, `react`]} />\n        <main>\n          <Title>Latest Posts</Title>\n          {posts.map(({ node }) => {\n            return <Post key={node.id} node={node} />;\n          })}\n        </main>\n      </Layout>\n    );\n  }\n}\n\nexport default BlogIndex;\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n      edges {\n        node {\n          id\n          excerpt(pruneLength: 160)\n          fields {\n            slug\n            readingTime {\n              text\n            }\n          }\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n          }\n        }\n      }\n    }\n  }\n`;\n","import { css } from 'styled-components';\n\nconst sizes = {\n  desktop: 992,\n  tablet: 768,\n  phone: 576,\n};\n\n// Iterate through the sizes and create a media template\nconst media = Object.keys(sizes).reduce((acc, label) => {\n  acc[label] = (...args) => css`\n    @media (max-width: ${sizes[label] / 16}em) {\n      ${css(...args)}\n    }\n  `;\n\n  return acc;\n}, {});\n\nexport default media;\n","import styled from 'styled-components';\nimport { Link } from 'gatsby';\n\nconst StyledLink = styled(Link)`\n  text-decoration: none;\n  color: rgba(0, 0, 0, 0.8);\n`;\n\nexport default StyledLink;\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Helmet from 'react-helmet'\nimport { StaticQuery, graphql } from 'gatsby'\n\nfunction SEO({ description, lang, meta, keywords, title }) {\n  return (\n    <StaticQuery\n      query={detailsQuery}\n      render={data => {\n        const metaDescription =\n          description || data.site.siteMetadata.description\n        return (\n          <Helmet\n            htmlAttributes={{\n              lang,\n            }}\n            title={title}\n            titleTemplate={`%s | ${data.site.siteMetadata.title}`}\n            meta={[\n              {\n                name: `description`,\n                content: metaDescription,\n              },\n              {\n                property: `og:title`,\n                content: title,\n              },\n              {\n                property: `og:description`,\n                content: metaDescription,\n              },\n              {\n                property: `og:type`,\n                content: `website`,\n              },\n              {\n                name: `twitter:card`,\n                content: `summary`,\n              },\n              {\n                name: `twitter:creator`,\n                content: data.site.siteMetadata.author,\n              },\n              {\n                name: `twitter:title`,\n                content: title,\n              },\n              {\n                name: `twitter:description`,\n                content: metaDescription,\n              },\n            ]\n              .concat(\n                keywords.length > 0\n                  ? {\n                      name: `keywords`,\n                      content: keywords.join(`, `),\n                    }\n                  : []\n              )\n              .concat(meta)}\n          />\n        )\n      }}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  keywords: [],\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.array,\n  keywords: PropTypes.arrayOf(PropTypes.string),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO\n\nconst detailsQuery = graphql`\n  query DefaultSEOQuery {\n    site {\n      siteMetadata {\n        title\n        description\n        author\n      }\n    }\n  }\n`\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\nimport StyledLink from '../utils/styled-link';\nimport media from '../utils/media';\n\nconst Container = styled.nav`\n  box-shadow: 0 4px 12px 0 rgba(0, 0, 0, 0.05);\n  height: 6rem;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst Title = styled.h1`\n  font-size: 1.6rem;\n  font-weight: 800;\n  letter-spacing: 0.1rem;\n  text-transform: uppercase;\n  margin: 0;\n\n  ${media.phone`\n    text-align: center;\n  `}\n`;\n\nconst Header = ({ title }) => (\n  <Container>\n    <StyledLink to={'/'}>\n      <Title>{title}</Title>\n    </StyledLink>\n  </Container>\n);\n\nHeader.defaultProps = {\n  title: '',\n};\n\nHeader.propTypes = {\n  title: PropTypes.string,\n};\n\nexport default Header;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport styled, { createGlobalStyle } from 'styled-components';\nimport { StaticQuery, graphql } from 'gatsby';\n\nimport Header from './header';\nimport media from '../utils/media';\n\nconst GlobalStyles = createGlobalStyle`\n  @font-face {\n    font-family: system;\n    font-style: normal;\n    font-weight: 300;\n    src: local('.SFNSText-Light'), local('.HelveticaNeueDeskInterface-Light'),\n      local('.LucidaGrandeUI'), local('Ubuntu Light'), local('Segoe UI Light'),\n      local('Roboto-Light'), local('DroidSans'), local('Tahoma');\n  }\n\n  :root {\n    font-size: 10px;\n  }\n\n  body {\n    font-family: 'system';\n    margin: 0;\n    text-rendering: optimizeLegibility;\n    -webkit-font-smoothing: antialiased;\n    color: rgba(0, 0, 0, 0.8);\n    min-height: 100vh;\n    position: relative;\n    font-size: 1.6rem;\n  }\n\n  h1, h2, h3, h4, h5, h6 {\n    font-family: 'Oswald', sans-serif;\n  }\n\n  h2 {\n    font-size: 2.5rem;\n  }\n\n  h3 {\n    font-size: 2.4rem;\n  }\n\n  h4 {\n    font-size: 1.6rem;\n  }\n  \n  code {\n    font-family: Menlo,Monaco,\"Courier New\",Courier,monospace;\n    word-break: break-word;\n  }\n\n  pre code {\n    word-break: normal;\n  }\n\n  :not(pre) > code[class*=\"language-\"], pre[class*=\"language-text\"] {\n    background-color: transparent;\n    color: inherit;\n    font-size: medium;\n  }\n`;\n\nconst Footer = styled.footer`\n  display: block;\n  height: 6rem;\n`;\n\nconst Content = styled.div`\n  width: 60%;\n  max-width: 728px;\n  margin: 0 auto;\n\n  ${media.tablet`\n    width: 80%;\n  `}\n`;\n\nclass Layout extends Component {\n  render() {\n    const { children } = this.props;\n    return (\n      <StaticQuery\n        query={graphql`\n          query SiteTitleQuery {\n            site {\n              siteMetadata {\n                title\n              }\n            }\n          }\n        `}\n        render={data => (\n          <>\n            <Header title={data.site.siteMetadata.title} />\n            <Content>{children}</Content>\n            <Footer />\n            <GlobalStyles />\n          </>\n        )}\n      />\n    );\n  }\n}\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default Layout;\n"],"sourceRoot":""}